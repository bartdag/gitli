#!/usr/bin/env python
# coding: utf-8
import optparse
import sys
from os.path import split, join, exists
from os import getcwd

ISSUES = '.issues'
OPEN = '.issues-open'
LAST = '.issues-last'
CURRENT = '.issues-current'
COMMENTS = '.issues-comments'
MSEPARATOR = ','
OSEPARATOR = '\n'

TTYPES = ['Task', 'Bug', 'Enhancement']


def ask_type(verbose=False):
    if not verbose:
        return 1

    ttype = input('Task type: 1-Task, 2-Bug, 3-Enhancement [1]: ')
    ttype = ttype.strip().lower()
    if ttype in {'', '1', 'task'}:
        return 1
    elif ttype in {'2', 'bug'}:
        return 2
    elif ttype in {'3', 'enhancement'}:
        return 3
    else:
        return 1


def ask_milestone(path, verbose=False):
    current = open(join(path, CURRENT), 'r')
    current_value = current.read()
    current.close()

    if not verbose:
        return current_value

    milestone = input('Milestone: [{0}]: '.format(current_value)).strip()
    if not milestone:
        milestone = current_value

    return milestone


def add_open(path, issue_number):
    iopen = open(join(path, OPEN), 'a')
    iopen.write('{0}{1}'.format(issue_number, OSEPARATOR))
    iopen.close()


def remove_open(path, issue_number):
    iopen = open(join(path, OPEN), 'r')
    issues = iopen.read().split(OSEPARATOR)
    iopen.close()

    new_issues = OSEPARATOR.join((issue for issue in issues if issue !=
        issue_number))

    iopen = open(join(path, OPEN), 'w')
    iopen.write(new_issues)
    iopen.close()


def get_open_issues(path):

    iopen = open(join(path, OPEN), 'r')
    issues = iopen.read().split(OSEPARATOR)
    iopen.close()

    return issues


def filter_issues(issue, filters, open_issues, milestones, tasks):
    if 'open' in filters and issue[0] not in open_issues:
        return False

    if 'close' in filters and issue[0] in open_issues:
        return False

    if len(milestones) > 0 and issue[3] not in milestones:
        return False

    if len(tasks) > 0 and TTYPES[issue[2] - 1].lower() not in tasks:
        return False

    return True


def get_issue(path, issue_number):
    issues_file = open(join(path, ISSUES), 'r')
    lines = issues_file.readlines()
    issues_file.close()
    size = len(lines)
    index = 0
    issue = None
    while index < size:
        issue = (
            lines[index].strip(),
            lines[index + 1].strip(),
            int(lines[index + 2].strip()),
            lines[index + 3].strip())
        if issue[0] == issue_number:
            break
        else:
            issue = None
            index += 4

    return issue


def get_issues(path, filters, open_issues, milestones, tasks):
    issues_file = open(join(path, ISSUES), 'r')
    lines = issues_file.readlines()
    issues_file.close()
    issues = []
    size = len(lines)
    index = 0
    while index < size:
        issue = (
            lines[index].strip(),
            lines[index + 1].strip(),
            int(lines[index + 2].strip()),
            lines[index + 3].strip())
        if filter_issues(issue, filters, open_issues, milestones, tasks):
            issues.append(issue)
        index += 4

    return issues


def print_issues(issues, open_issues):
    for (number, title, task_id, milestone) in issues:
        if number in open_issues:
            open_text = 'open'
        else:
            open_text = 'closed'

        print('#{0} {1} [{2}] [{3}] - {4}'.format(number, title,
            TTYPES[task_id - 1], milestone, open_text))


def init(path):
    open(join(path, ISSUES), 'w').close()
    open(join(path, OPEN), 'w').close()
    open(join(path, COMMENTS), 'w').close()
    last = open(join(path, LAST), 'w')
    last.write('0')
    last.close()
    current = open(join(path, CURRENT), 'w')
    current.write('0.1')
    current.close()


def new_issue(path, title, verbose=False):
    last = open(join(path, LAST), 'r')
    issue_number = int(last.read().strip()) + 1
    last.close()

    ttype = ask_type(verbose)
    milestone = ask_milestone(path, verbose)

    issues = open(join(path, ISSUES), 'a')
    issues.write('{0}\n{1}\n{2}\n{3}\n'.format(issue_number, title,
        ttype, milestone))
    issues.close()

    add_open(path, issue_number)

    last = open(join(path, LAST), 'w')
    last.write('{0}'.format(issue_number))
    last.close()


def close_issue(path, issue_number):
    remove_open(path, issue_number)


def list_issues(path, filters=None):
    if filters is None:
        filters = []
    else:
        filters = [ifilter.strip().lower() for ifilter in filters]

    open_issues = get_open_issues(path)

    tasks = [ifilter for ifilter in filters if ifilter in
        {'task', 'bug', 'enhancement'}]

    milestones = [ifilter for ifilter in filters if ifilter not in
        {'open', 'close', 'task', 'bug', 'enhancement'}]

    issues = get_issues(path, filters, open_issues, milestones, tasks)

    print_issues(issues, open_issues)


def reopen_issue(path, issue_number):
    # To make sure that we don't add the issue twice... that would be bad
    remove_open(path, issue_number)
    add_open(path, issue_number)


def show_issue(path, issue_number):
    issue = get_issue(path, issue_number)
    if issue is not None:
        open_issues = get_open_issues(path)
        print_issues([issue], open_issues)
    else:
        print('Issue #{0} not found'.format(issue_number))


if __name__ == '__main__':
    parser = optparse.OptionParser(
        usage="""Usage: git-li <command> [command-options]

    Commands:
    init        Initialize the git repositoryto use git-li
    list        Lists issues for this repository
    new         Creates a new issue for this repository
    show        Shows the given issue (todo)
    edit        edit the given issue (todo)
    reopen      Reopen the given issue (todo)
    close       Close the given issue""")

    #comment     Add a comment to the given issue (todo)

    parser.add_option("-v", "--verbose",
            action="store_true",
            dest="verbose",
            default=False)

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.print_help()
        sys.exit(1)

    command = args[0]
    args = args[1:]
    path = getcwd()
    while not exists(join(path, ".git")):
        path, extra = split(path)
        if not extra:
            print("Unable to find a git repository. ")
            sys.exit(1)
    if command == 'init':
        init(path)
    elif command == 'new':
        new_issue(path, args[0].strip(), options.verbose)
    elif command == 'close':
        close_issue(path, args[0].strip())
    elif command == 'list':
        list_issues(path, args)
    elif command == 'reopen':
        reopen_issue(path, args[0].strip())
    elif command == 'show':
        show_issue(path, args[0].strip())
